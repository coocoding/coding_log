#include<iostream>
#include<queue>
#include<vector>
using namespace std;

int board[51][51];
int vis[51][51] = { 0, };

int dx[8] = { 1,0,-1,0 ,1,1,-1,-1 };
int dy[8] = { 0,-1,0,1 ,-1,1,-1,1 };
void bfs(int x,int y,int h,int w) {
	vis[x][y] = 1;
	queue<pair<int, int>> Q;
	Q.push({ x,y });
	while (!Q.empty()) {
		pair<int, int> cur = Q.front();
		Q.pop();
		for (int i = 0; i < 8; i++) {
			int nx = cur.first + dx[i];
			int ny = cur.second + dy[i];
			if (nx < 0 || ny < 0 || nx >= h || ny >= w) continue;
			if (board[nx][ny] == 0 || vis[nx][ny]) continue;
			vis[nx][ny] = 1;
			Q.push({ nx,ny });
		}
	}
}
int main() {
	vector<int> answer;
	while(true){
		int w, h;
		cin >> w >> h;
		if (w == 0 && h == 0)
			break;
		for(int i=0;i<h;i++)
			for (int j = 0; j < w; j++) {
				int num;
				cin >> num;
				board[i][j] = num;
				vis[i][j] = 0;
			}
		int cnt = 0;
		for (int i = 0; i < h; i++)
			for (int j = 0; j < w; j++) {
				if (board[i][j] == 1 && !vis[i][j]) {
					bfs(i,j,h,w);
					cnt++;
				}

			}
		answer.push_back(cnt);
	}
	for (int i = 0; i < answer.size(); i++)
		cout << answer[i] << '\n';
}