#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
using namespace std;

int board[102][102] = { 0, };
int vis[102][102] = { 0, };
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };
int bfs(int x, int y,int h,int w) {
	int area = 1;
	vis[x][y] = 1;
	queue<pair<int, int>> Q;
	Q.push({ x,y });
	while (!Q.empty()) {
		pair<int, int> cur = Q.front();
		Q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = cur.first + dx[i];
			int ny = cur.second + dy[i];
			if (nx < 0 || ny < 0 || nx >= h || ny >= w) continue;
			if (board[nx][ny] == 1 || vis[nx][ny]) continue;
			vis[nx][ny] = 1;
			area++;
			Q.push({ nx,ny });
		}
	}
	return area;
}
int main() {
	int m, n, k;
	cin >> m >> n >> k;
	for (int i = 0; i < k; i++) {
		int x1, y1, x2, y2;
		cin >> x1 >> y1 >> x2 >> y2;
		for (int j = m - y2; j < m - y1;j++) {
			for (int k = x1; k < x2; k++) {
				board[j][k] = 1;
			}
		}
		
	}
	vector<int> answer;
	int cnt = 0;
	for(int i=0;i<m;i++)
		for (int j = 0; j < n; j++) {
			if (board[i][j] == 0 && !vis[i][j]) {
				answer.push_back(bfs(i, j, m, n));
				cnt++;
			}
		}
	sort(answer.begin(), answer.end());
	cout << cnt << '\n';
	for (int i = 0; i < answer.size(); i++)
		cout << answer[i] << ' ';
}
