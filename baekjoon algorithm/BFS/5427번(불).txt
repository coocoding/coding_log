#include<iostream>
#include<queue>
using namespace std;

vector<int> v;
char board[1002][1002];
int visit_fire[1002][1002];
int visit_person[1002][1002];

int dx[] = { -1,0,1,0 };
int dy[] = { 0,1,0,-1 };

queue<pair<int, int>> fire;
queue<pair<int, int>> person;

void bfs_fire(int w, int h) {

	while (!fire.empty()) {
		auto cur = fire.front();
		fire.pop();
		for (int dir = 0; dir < 4; dir++) {
			int nx = cur.first + dx[dir];
			int ny = cur.second + dy[dir];

			if (nx < 0 || nx >= h || ny < 0 || ny >= w) continue;
			if (visit_fire[nx][ny] >= 0 || board[nx][ny] == '#') continue;

			visit_fire[nx][ny] = visit_fire[cur.first][cur.second] + 1;
			fire.push({ nx,ny });
		}
	}
}

void bfs_person(int w, int h) {
	while (!person.empty()) {
		auto cur = person.front();
		person.pop();

		for (int dir = 0; dir < 4; dir++) {
			int nx = cur.first + dx[dir];
			int ny = cur.second + dy[dir];

			if (nx < 0 || nx >= h || ny < 0 || ny >= w) {
				v.push_back(visit_person[cur.first][cur.second] + 1);
				return;
			}
			if (visit_person[nx][ny] >= 0 || board[nx][ny] == '#' || board[nx][ny] == '*') continue;
			if (visit_person[cur.first][cur.second] + 1 >= visit_fire[nx][ny] && visit_fire[nx][ny] != -1) continue; //불이 못가서 -1인경우도 상근이보다 작다고 나오므로 체크해야 함


			visit_person[nx][ny] = visit_person[cur.first][cur.second] + 1;
			person.push({ nx,ny });
		}
	}
	v.push_back(-10);

}

void init(int w, int h) {
	for (int i = 0; i < h; i++)
		for (int j = 0; j < w; j++) {
			visit_fire[i][j] = -1;
			visit_person[i][j] = -1;
		}


}

//queue를 안 비울 경우 테스트 케이스는 통과하지만 제출하면 에러가 난다. 
void makeEmpty() {
	while (!fire.empty())
		fire.pop();
	while (!person.empty())
		person.pop();

}
int main() {
	int t;
	cin >> t;

	for (int test = 0; test < t; test++) {
		int w, h;
		cin >> w >> h;
		init(w, h);
		for (int i = 0; i < h; i++) {
			for (int j = 0; j < w; j++) {
				cin >> board[i][j];
				if (board[i][j] == '*') {
					visit_fire[i][j] = 0;
					fire.push({ i,j });
				}
				else if (board[i][j] == '@') {
					visit_person[i][j] = 0;
					person.push({ i,j });
				}

			}
		}
		bfs_fire(w, h);
		bfs_person(w, h);
		makeEmpty();

	}
	for (int i = 0; i < v.size(); i++) {
		if (v[i] == -10)
			cout << "IMPOSSIBLE" << endl;
		else
			cout << v[i] << endl;
	}
}