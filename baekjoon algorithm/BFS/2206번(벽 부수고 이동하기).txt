#include<iostream>
#include<queue>
using namespace std;

int n, m;
int board[1001][1001];
int dist[1001][1001][2];
int dx[4] = { 0,1,0,-1 };
int dy[4] = { 1,0,-1,0 };
int BFS() {
	queue<pair<pair<int, int>, int>> Q;
	Q.push({ { 1,1 }, 1 });
	dist[1][1][1] = 1;
	while (!Q.empty()) {
		int x = Q.front().first.first;
		int y = Q.front().first.second;
		int wall = Q.front().second;
		Q.pop();
		
		if (x == n && y == m) {
			return dist[x][y][wall];
		}
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx<1 || ny<1 || nx>n || ny>m) continue;
			//벽이고 뚫을 수 있다.
			if (board[nx][ny] && wall) {
				dist[nx][ny][wall - 1] = dist[x][y][wall] + 1;
				Q.push({ { nx,ny },wall - 1 });
			}
			//벽아니고 방문하지 않았다.
			if (board[nx][ny] == 0 && dist[nx][ny][wall] == 0) {
				dist[nx][ny][wall] = dist[x][y][wall] + 1;
				Q.push({ { nx,ny }, wall });
			}
		}
	}
	return -1;
}
int main() {
	cin >> n >> m;

	for (int i = 1; i <= n; i++) {
		string temp;
		cin >> temp;
		for (int j = 1; j <= m; j++) {
			board[i][j] = temp[j-1]-'0';
		}
	}
	cout<<BFS();

}